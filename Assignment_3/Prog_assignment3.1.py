import random
import math
import matplotlib
import progressbar
import os

# Check if running without display before importing pyplot
if os.environ.get('DISPLAY','') == '':
    print('No display found... using non-interactive Agg backend')
    matplotlib.use('Agg')

import matplotlib.pyplot as plt

#network of 100,000 IP addresses
network = [x for x in range(1, 100001)]

# create a list of vulnerable IP addresses 
vulnerableIP = []
for i in range(100):
	i = i * 1000
	for j in range(1, 11):
		vulnerableIP.append(i + j)

I_graph =[]
for i in range(0,3):
	infect_rate = 3
	inital_infection = 1001
	infectedIP = []
	infectedIP.append(inital_infection)
	I = []
	print("Iteration", str(i+1)+":")
	with progressbar.ProgressBar(max_value=len(vulnerableIP)) as bar:
		while len(infectedIP) != len(vulnerableIP):
			I.append(len(infectedIP))
			temp_infectedIP = [] #we don't want to change the for loop.
			for iip in infectedIP:
				network.remove(iip)
				scan_result = random.sample(network, infect_rate) #generate 3 random IP addresses
				network.append(iip)
				for attackIP in scan_result:
					if attackIP in vulnerableIP:
						temp_infectedIP.append(attackIP)
			infectedIP += temp_infectedIP
			infectedIP = list(set(infectedIP))
			bar.update(len(infectedIP))
		I_graph.append(I)

#timing info:
print("Number of time steps taken to infect all 1000 vulnerable computers in simulation-1: ", len(I_graph[0]))
print("Number of time steps taken to infect all 1000 vulnerable computers in simulation-2: ", len(I_graph[1]))
print("Number of time steps taken to infect all 1000 vulnerable computers in simulation-3: ", len(I_graph[2]))

#Graphing
# x axis values
x1 = list(range(0, len(I_graph[0])))
# corresponding y axis values
y1 = I_graph[0]
#plotting the points
plt.plot(x1,y1, label = "simulation-1", linestyle = "dashed")
# x axis values
x2 = list(range(0, len(I_graph[1])))
# corresponding y axis values
y2 = I_graph[1]
#plotting the points
plt.plot(x2,y2, label = "simulation-2", linestyle = "dotted")
# x axis values
x3 = list(range(0, len(I_graph[2])))
# corresponding y axis values
y3 = I_graph[2]
#plotting the points
plt.plot(x3,y3, label = "simulation-3")
#naming the x axis
plt.xlabel('time')
#naming the y axis
plt.ylabel('I(t)')
#title of the graph
plt.title('Random-Scanning Worm Propogation Graph')
#show the legend on the plot
plt.legend()
#save plot to folder
plt.savefig("output_random_scanning.pdf")





